name: PR Manager - Auto Assign & Project

on:
  pull_request:
    types: [opened, review_requested]

jobs:
  handle-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read
      projects: write

    steps:
      - name: Assign PR to author & owner
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            const owner = context.repo.owner;
            const reviewers = [owner]; // Owner as reviewer

            // Assign the author as an assignee
            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              assignees: [author] // Assign the author
            });

            // Request review from the owner
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: reviewers // Add the owner as a reviewer
            });

      - name: Add PR to Project & Set Status on review request
        if: github.event_name == 'pull_request' && github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const projectName = "YOUR_PROJECT_NAME";
            const statusFieldName = "Status";
            const statusOptionName = "Todo";
            const prNodeId = pr.node_id;

            // Fetch Project
            const projectRes = await github.graphql(`
              query($owner:String!, $repo:String!, $projName:String!) {
                repository(owner:$owner, name:$repo) {
                  projectV2(number:0, first:100, query:$projName) {
                    nodes { id title }
                  }
                }
              }
            `, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              projName: projectName
            });
            const project = projectRes.repository.projectV2.nodes.find(p => p.title === projectName);
            if (!project) throw new Error(`Project "${projectName}" not found`);
            const projectId = project.id;

            // Add PR item to Project
            const addRes = await github.graphql(`
              mutation($projectId:ID!, $contentId:ID!) {
                addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                  item { id }
                }
              }
            `, { projectId, contentId: prNodeId });
            const itemId = addRes.addProjectV2ItemById.item.id;

            // Query fields to find "Status" field & "Todo" option
            const fieldsRes = await github.graphql(`
              query($projectId:ID!) {
                node(id:$projectId) {
                  ... on ProjectV2 {
                    fields(first:20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id name options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });
            const statusField = fieldsRes.node.fields.nodes.find(f => f.name === statusFieldName);
            if (!statusField) throw new Error(`Field "${statusFieldName}" not found`);
            const statusOption = statusField.options.find(o => o.name === statusOptionName);
            if (!statusOption) throw new Error(`Option "${statusOptionName}" not found`);

            // Update status on the item
            await github.graphql(`
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:ID!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId:$projectId,
                  itemId:$itemId,
                  fieldId:$fieldId,
                  value:{ singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: statusOption.id
            });