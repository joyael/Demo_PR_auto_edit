name: PR_Manager__Auto_Assign_and_Project

on:
  pull_request:
    types: [opened]
  pull_request_review:
    types: [submitted]

jobs:
  handle-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      issues: write
      contents: read

    steps:
      - name: Generate token from GitHub App
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Assign PR to author & owner
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;

            // Assign the PR author as an assignee
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              assignees: [author]
            });

      - name: Add PR to Project & Set Status on review request
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'changes_requested'
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const { data: user } = await github.rest.users.getAuthenticated();
            console.log("Authenticated as:", user.login);
            const pr = context.payload.pull_request;
            const projectName = "GitHub Issue Tracker Sync";
            const statusFieldName = "Status";
            const statusOptionName = "Ready";
            const prNodeId = pr.node_id;

            // Fetch all projects in the repository
            const projectRes = await github.graphql(`
              query($org: String!) {
                organization(login: $org) {
                  projectsV2(first: 10) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `, {
              org: context.repo.owner
            });

            console.log("Project data : ",projectRes);

            const project = projectRes.repository.projectsV2.nodes.find(p => p.title === projectName);
            if (!project) throw new Error(`Project "${projectName}" not found`);
            const projectId = project.id;

            // Add PR to project
            const addRes = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, {
              projectId,
              contentId: prNodeId
            });

            const itemId = addRes.addProjectV2ItemById.item.id;

            // Get fields of the project to locate the "Status" field
            const fieldsRes = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        __typename
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `, { projectId });

            const statusField = fieldsRes.node.fields.nodes.find(f => f.name === statusFieldName);
            if (!statusField) throw new Error(`Field "${statusFieldName}" not found`);

            const statusOption = statusField.options.find(o => o.name === statusOptionName);
            if (!statusOption) throw new Error(`Option "${statusOptionName}" not found`);

            // Update the status field value in the project item
            await github.graphql(`
              mutation(
                $projectId: ID!, 
                $itemId: ID!, 
                $fieldId: ID!,
                $optionId: String!
              ) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: statusOption.id
            });

            console.log("Pull Request added to project and status set.");
      
